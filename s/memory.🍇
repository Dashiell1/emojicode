📗
  Represents a region in memory.

  Working with 🧠 requires great care as this interface allows you to directly
  manipulate memory.

  >!N When working with this class make sure to take into account that it is
  >!N up to you to make sure that object life-time is properly managed.
  >!N Especially, pay attention to the notes for ♻️ and 🚜.

  It’s important to understand that instances of 🧠 are basically memory
  addresses. Always think of a 🧠 instance as pointing to a memory
  region. Because 🧠 instance always are addresses it is recommmended that you
  make no more copies than absolutely necessary to avoid unwanted side effects.

  It is not possible to directly manipulate or access memory addresses as this
  would interfer with the automatic memory management Emojicode provides.
📗
🌍 📻 🕊 🧠 🍇
  📗 Creates an instance by allocating *size* bytes. 📗
  ☣️️ 🆕 size 🔢 🍇🍉

  📗
    Writes *value* starting *offset* bytes past the address represented by this
    instance.

    >!H If the memory area represented is smaller than `⚖️T ➕ offset` bytes,
    >!H undefined behavior is caused!
  📗
  ☣️️ ➡️ 🐽🐚☣️️T⚪️🍆 🎍🥡 value T offset 🔢 📻 🔤ejcBuiltIn🔤

  📗
    Reads a value of type T starting *bytes* bytes past the address
    represented by this instance.

    >!H If the memory area represented is smaller than `⚖️T ➕ offset` bytes,
    >!H undefined behavior is caused!
    >!H
    >!H If the value at specified location is not *exactly* of type T or,
    >!H in the case T is a class type, a subclass of T, the behavior is
    >!H undefined!
  📗
  ☣️️ ❗️ 🐽🐚☣️️T⚪️🍆 offset 🔢 ➡️ ✴️T 📻 🔤ejcBuiltIn🔤

  📗
    Resizes this memory area.

    >!N Do not call this method if you have copies of this 🧠, i.e. if you have
    >!N multiple pointers to this area. Calling this method updates the
    >!N represented address and can invalidate all other 🧠 that pointed to this
    >!N address. Only ever call this method if there is only one 🧠 representing
    >!N the memory area.
  📗
  ☣️️🖍 ❗️ 🏗 newSize 🔢 📻 🔤ejcMemoryRealloc🔤

  📗
    Releases a value of type T that is located *offset* bytes past the
    beginning of this memory area.

    This method might not actually write to the memory, but it is crucial
    that you call it on every value that was placed in the memory area that
    you no longer need.

    >!N Release every value placed in the memory area with this method before
    >!N overwritting it or entirely abandoning this 🧠 instance!
  📗
  ☣️️ ❗️ ♻️🐚☣️️T⚪️🍆 offset 🔢 📻 🔤ejcBuiltIn🔤

  📗
    Copies *bytes* bytes from *source* starting from *sourceOffset* to this
    instane, writing the copied bytes *destinationOffset* bytes past the
    beginning of this memory area.

    *source* may be the same as the instance on which the method is called
    and the memory area which is copied may overlap the destination area.

    >!H If the memory area represented is smaller than
    >!H `bytes ➕ destinationOffset` bytes or *source* is smaller than
    >!H `bytes ➕ sourceOffset` bytes, undefined behavior is caused!

    >!N Do not copy managed values using this method! Copy each value
    >!N individually with 🐽 and ➡️ 🐽!
  📗
  ☣️️ ❗️ 🚜 destinationOffset 🔢 source 🧠 sourceOffset 🔢 bytes 🔢 📻 🔤ejcBuiltIn🔤

  📗
    Sets the first *bytes* bytes starting from *offset* bytes past the address
    represented by this instance to *byteValue*.

    >!H If the memory area represented is smaller than `bytes ➕ offset` bytes,
    >!H undefined behavior is caused!
  📗
  ☣️️ ❗️ ✍️ byteValue 💧 offset 🔢 bytes 🔢 📻 🔤ejcBuiltIn🔤

  📗
    Compares the first *bytes* of two memory areas.

    >!H If either the memory area represented by this instance or the one
    >!H represented by *other* or both are smaller than *bytes*, undefined
    >!H behavior is caused!
  📗
  ☣️️ ❗️ ↔️ other 🧠 bytes 🔢 ➡️ 🔢 📻 🔤ejcMemoryCompare🔤
🍉
